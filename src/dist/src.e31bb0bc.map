{"version":3,"sources":["index.js"],"names":["String","prototype","trim","replace","flickerThroughAllMessages","lines","document","addEventListener","needle","getElementById","innerHTML","myPCMSource","audioContext","window","AudioContext","webkitAudioContext","e","alert","bufferSize","myPCMProcessingNode","createScriptProcessor","onaudioprocess","output","outputBuffer","getChannelData","i","Math","random","connect","destination","fetch","corpusPath","then","res","text","data","pattern","re","RegExp","split","matchLineIndices","line","forEach","idx","match","push","lineIdx","matchIdx","skipFrameCounter","showMessages","msg","length","needleSubIndex","indexOf","singleCharOffsetPx","offsetFromLeft","style","left","requestAnimationFrame"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA,IAAG,OAAOA,MAAM,CAACC,SAAP,CAAiBC,IAAxB,KAAkC,WAArC,EAAkD;AAChDF,EAAAA,MAAM,CAACC,SAAP,CAAiBC,IAAjB,GAAwB,YAAW;AACjC,WAAOF,MAAM,CAAC,IAAD,CAAN,CAAaG,OAAb,CAAqB,YAArB,EAAmC,EAAnC,CAAP;AACD,GAFD;AAGD;;AAED,SAASC,yBAAT,CAAmCC,KAAnC,EAA0C,CAEzC;;AAEDC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,YAAW;AACvD,MAAIC,MAAM,GAAG,MAAb;AACA,MAAIH,KAAK,GAAG,EAAZ;AAEAC,EAAAA,QAAQ,CAACG,cAAT,CAAwB,QAAxB,EAAkCC,SAAlC,GAA8C,0BAA9C;AAEAJ,EAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,YAAM;AACvC,aAASI,WAAT,GAAuB;AACrB,aADqB,CACX;AACX;;AAED,QAAIC,YAAJ;;AACA,QAAI;AACFC,MAAAA,MAAM,CAACC,YAAP,GAAsBD,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAApD;AACAH,MAAAA,YAAY,GAAG,IAAIE,YAAJ,EAAf;AACD,KAHD,CAGE,OAAME,CAAN,EAAS;AACTC,MAAAA,KAAK,CAAC,gDAAD,CAAL;AACD;;AAED,QAAMC,UAAU,GAAG,IAAnB;AACA,QAAMC,mBAAmB,GAAGP,YAAY,CAACQ,qBAAb,CAAmCF,UAAnC,EAA+C,CAA/C,EAAkD,CAAlD,CAA5B;;AACAC,IAAAA,mBAAmB,CAACE,cAApB,GAAqC,UAASL,CAAT,EAAY;AAC/C,UAAMM,MAAM,GAAGN,CAAC,CAACO,YAAF,CAAeC,cAAf,CAA8B,CAA9B,CAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAApB,EAAgCO,CAAC,EAAjC,EAAqC;AACnC;AACAH,QAAAA,MAAM,CAACG,CAAD,CAAN,GAAYC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAAhC;AACD;AACF,KAND;;AAQAR,IAAAA,mBAAmB,CAACS,OAApB,CAA4BhB,YAAY,CAACiB,WAAzC;AACD,GAxBD;AA0BAC,EAAAA,KAAK,CAACC,kBAAD,CAAL,CAAkBC,IAAlB,CAAuB,UAACC,GAAD;AAAA,WAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,GAAvB,EAA4CF,IAA5C,CAAiD,UAAAG,IAAI,EAAI;AACvD7B,IAAAA,QAAQ,CAACG,cAAT,CAAwB,QAAxB,EAAkCC,SAAlC,GAA8C,uCAA9C;AAEA,QAAM0B,OAAO,eAAQ5B,MAAR,OAAb;AACA,QAAM6B,EAAE,GAAG,IAAIC,MAAJ,CAAWF,OAAX,EAAoB,GAApB,CAAX;AAEA/B,IAAAA,KAAK,GAAG8B,IAAI,CAACI,KAAL,CAAW,IAAX,CAAR;AAEA,QAAMC,gBAAgB,GAAG,EAAzB;AACA,QAAIC,IAAI,GAAG,EAAX;AACApC,IAAAA,KAAK,CAACqC,OAAN,CAAc,UAACD,IAAD,EAAOE,GAAP,EAAe;AAC3BF,MAAAA,IAAI,GAAGpC,KAAK,CAACsC,GAAD,CAAZ;;AACA,UAAGF,IAAI,CAACG,KAAL,CAAWP,EAAX,CAAH,EAAmB;AACjBG,QAAAA,gBAAgB,CAACK,IAAjB,CAAsBF,GAAtB;AACD;AACF,KALD;AAQA,QAAIG,OAAO,GAAG,CAAd;AACA,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIC,gBAAgB,GAAG,CAAvB;;AACA,aAASC,YAAT,GAAwB;AACtB,UAAGD,gBAAgB,GAAG,CAAnB,IAAwB,CAA3B,EAA8B;AAC5B,YAAIE,GAAG,GAAG,EAAV;;AAEA,YAAG1C,MAAM,IAAI,EAAb,EAAiB;AACf;AACA0C,UAAAA,GAAG,GAAG7C,KAAK,CAACyC,OAAD,CAAX;AACAA,UAAAA,OAAO,GAAIA,OAAO,GAAG,CAAV,IAAezC,KAAK,CAAC8C,MAAtB,GAA+B,CAA/B,GAAmCL,OAAO,GAAG,CAAvD;AACD,SAJD,MAIO;AACL;AACAI,UAAAA,GAAG,GAAG7C,KAAK,CAACmC,gBAAgB,CAACO,QAAD,CAAjB,CAAX;AACAA,UAAAA,QAAQ,GAAIA,QAAQ,GAAG,CAAX,IAAgBP,gBAAgB,CAACW,MAAlC,GAA2C,CAA3C,GAA+CJ,QAAQ,GAAG,CAArE;AACAG,UAAAA,GAAG,GAAGA,GAAG,CAAChD,IAAJ,EAAN;AAEA,cAAMkD,cAAc,GAAGF,GAAG,CAACG,OAAJ,CAAY7C,MAAZ,CAAvB,CANK,CAQL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,cAAM8C,kBAAkB,GAAG,EAA3B;AACA,cAAMC,cAAc,GAAG,GAAvB;AACAjD,UAAAA,QAAQ,CAACG,cAAT,CAAwB,QAAxB,EAAkC+C,KAAlC,CAAwCC,IAAxC,aACE,IAAKH,kBAAkB,GAACF,cAAxB,GAA0CG,cAD5C;AAGD;;AAEDjD,QAAAA,QAAQ,CAACG,cAAT,CAAwB,QAAxB,EAAkCC,SAAlC,GAA8CwC,GAA9C;AACD;;AAEDF,MAAAA,gBAAgB,GAtCM,CAuCtB;;AACAnC,MAAAA,MAAM,CAAC6C,qBAAP,CAA6BT,YAA7B;AACD;;AAEDpC,IAAAA,MAAM,CAAC6C,qBAAP,CAA6BT,YAA7B;AACD,GAjED;AAkED,CAlGD","file":"src.e31bb0bc.map","sourceRoot":"..","sourcesContent":["import corpusPath from './bigcorpus.txt'\n\nif(typeof(String.prototype.trim) === \"undefined\") {\n  String.prototype.trim = function() {\n    return String(this).replace(/^\\s+|\\s+$/g, '');\n  };\n}\n\nfunction flickerThroughAllMessages(lines) {\n\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  let needle = \"love\";\n  let lines = [];\n\n  document.getElementById('msgDiv').innerHTML = 'Loading.................'\n\n  document.addEventListener('click', () => {\n    function myPCMSource() {  \n      return    // For example, generate noise samples.\n    }\n\n    let audioContext;\n    try {\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      audioContext = new AudioContext();\n    } catch(e) {\n      alert('Web Audio API is not supported in this browser');\n    }\n\n    const bufferSize = 4096;\n    const myPCMProcessingNode = audioContext.createScriptProcessor(bufferSize, 1, 1);\n    myPCMProcessingNode.onaudioprocess = function(e) {\n      const output = e.outputBuffer.getChannelData(0);\n      for (var i = 0; i < bufferSize; i++) {\n        // Generate and copy over PCM samples.\n        output[i] = Math.random() * 2 - 1;\n      }\n    }\n\n    myPCMProcessingNode.connect(audioContext.destination);\n  });\n\n  fetch(corpusPath).then((res) => res.text()).then(data => {\n    document.getElementById('msgDiv').innerHTML = 'Searching............................'\n\n    const pattern = `.+${needle}.+`\n    const re = new RegExp(pattern, 'g')\n\n    lines = data.split('\\n');\n\n    const matchLineIndices = [];\n    let line = ''\n    lines.forEach((line, idx) => {\n      line = lines[idx];\n      if(line.match(re)) {\n        matchLineIndices.push(idx);\n      }\n    });\n\n\n    let lineIdx = 0;\n    let matchIdx = 0;\n    let skipFrameCounter = 0;\n    function showMessages() {\n      if(skipFrameCounter % 3 == 0) {      \n        let msg = '';\n\n        if(needle == '') {\n          // loop through all messages, sometimes slowing down\n          msg = lines[lineIdx];\n          lineIdx = (lineIdx + 1 == lines.length)? 0 : lineIdx + 1;\n        } else {\n          // show matching messages, visually aligning needle\n          msg = lines[matchLineIndices[matchIdx]];\n          matchIdx = (matchIdx + 1 == matchLineIndices.length)? 0 : matchIdx + 1;\n          msg = msg.trim();\n\n          const needleSubIndex = msg.indexOf(needle);\n\n          // console.log('needleSubIndex', needleSubIndex);\n          // FIXME\n          // FIXME\n          // FIXME\n          // FIXME\n          // FIXME\n          // FIXME\n          // FIXME\n          // a very huge width on the body makes the div centered on that \n          // huge div................ which does not work.\n          // make the div align on 0......... and the width be huge still.........\n          // set the big width on the div, not the body...........????????\n          const singleCharOffsetPx = 60;\n          const offsetFromLeft = 700;\n          document.getElementById('msgDiv').style.left = `${\n            0 - (singleCharOffsetPx*needleSubIndex) + offsetFromLeft\n          }px`;\n        }\n\n        document.getElementById('msgDiv').innerHTML = msg;\n      }\n\n      skipFrameCounter++;\n      // TODO slow down randomly from time to time\n      window.requestAnimationFrame(showMessages);\n    }\n\n    window.requestAnimationFrame(showMessages);\n  });\n});\n"]}